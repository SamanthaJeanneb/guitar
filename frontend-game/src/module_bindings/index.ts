// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.2 (commit ).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { CreateLobby } from "./create_lobby_reducer.ts";
export { CreateLobby };
import { JoinLobby } from "./join_lobby_reducer.ts";
export { JoinLobby };
import { SetCharacter } from "./set_character_reducer.ts";
export { SetCharacter };
import { SetReady } from "./set_ready_reducer.ts";
export { SetReady };
import { SetScore } from "./set_score_reducer.ts";
export { SetScore };
import { SetSong } from "./set_song_reducer.ts";
export { SetSong };
import { StartMatch } from "./start_match_reducer.ts";
export { StartMatch };

// Import and reexport all table handle types
import { LobbyTableHandle } from "./lobby_table.ts";
export { LobbyTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { Lobby } from "./lobby_type.ts";
export { Lobby };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    lobby: {
      tableName: "lobby",
      rowType: Lobby.getTypeScriptAlgebraicType(),
      primaryKey: "code",
      primaryKeyInfo: {
        colName: "code",
        colType: Lobby.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: User.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    client_disconnected: {
      reducerName: "client_disconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    create_lobby: {
      reducerName: "create_lobby",
      argsType: CreateLobby.getTypeScriptAlgebraicType(),
    },
    join_lobby: {
      reducerName: "join_lobby",
      argsType: JoinLobby.getTypeScriptAlgebraicType(),
    },
    set_character: {
      reducerName: "set_character",
      argsType: SetCharacter.getTypeScriptAlgebraicType(),
    },
    set_ready: {
      reducerName: "set_ready",
      argsType: SetReady.getTypeScriptAlgebraicType(),
    },
    set_score: {
      reducerName: "set_score",
      argsType: SetScore.getTypeScriptAlgebraicType(),
    },
    set_song: {
      reducerName: "set_song",
      argsType: SetSong.getTypeScriptAlgebraicType(),
    },
    start_match: {
      reducerName: "start_match",
      argsType: StartMatch.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.3.2",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "CreateLobby", args: CreateLobby }
| { name: "JoinLobby", args: JoinLobby }
| { name: "SetCharacter", args: SetCharacter }
| { name: "SetReady", args: SetReady }
| { name: "SetScore", args: SetScore }
| { name: "SetSong", args: SetSong }
| { name: "StartMatch", args: StartMatch }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_disconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_disconnected", callback);
  }

  createLobby(code: string) {
    const __args = { code };
    let __writer = new BinaryWriter(1024);
    CreateLobby.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_lobby", __argsBuffer, this.setCallReducerFlags.createLobbyFlags);
  }

  onCreateLobby(callback: (ctx: ReducerEventContext, code: string) => void) {
    this.connection.onReducer("create_lobby", callback);
  }

  removeOnCreateLobby(callback: (ctx: ReducerEventContext, code: string) => void) {
    this.connection.offReducer("create_lobby", callback);
  }

  joinLobby(code: string) {
    const __args = { code };
    let __writer = new BinaryWriter(1024);
    JoinLobby.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("join_lobby", __argsBuffer, this.setCallReducerFlags.joinLobbyFlags);
  }

  onJoinLobby(callback: (ctx: ReducerEventContext, code: string) => void) {
    this.connection.onReducer("join_lobby", callback);
  }

  removeOnJoinLobby(callback: (ctx: ReducerEventContext, code: string) => void) {
    this.connection.offReducer("join_lobby", callback);
  }

  setCharacter(code: string, character: string) {
    const __args = { code, character };
    let __writer = new BinaryWriter(1024);
    SetCharacter.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_character", __argsBuffer, this.setCallReducerFlags.setCharacterFlags);
  }

  onSetCharacter(callback: (ctx: ReducerEventContext, code: string, character: string) => void) {
    this.connection.onReducer("set_character", callback);
  }

  removeOnSetCharacter(callback: (ctx: ReducerEventContext, code: string, character: string) => void) {
    this.connection.offReducer("set_character", callback);
  }

  setReady(code: string, ready: boolean) {
    const __args = { code, ready };
    let __writer = new BinaryWriter(1024);
    SetReady.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_ready", __argsBuffer, this.setCallReducerFlags.setReadyFlags);
  }

  onSetReady(callback: (ctx: ReducerEventContext, code: string, ready: boolean) => void) {
    this.connection.onReducer("set_ready", callback);
  }

  removeOnSetReady(callback: (ctx: ReducerEventContext, code: string, ready: boolean) => void) {
    this.connection.offReducer("set_ready", callback);
  }

  setScore(code: string, score: number) {
    const __args = { code, score };
    let __writer = new BinaryWriter(1024);
    SetScore.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_score", __argsBuffer, this.setCallReducerFlags.setScoreFlags);
  }

  onSetScore(callback: (ctx: ReducerEventContext, code: string, score: number) => void) {
    this.connection.onReducer("set_score", callback);
  }

  removeOnSetScore(callback: (ctx: ReducerEventContext, code: string, score: number) => void) {
    this.connection.offReducer("set_score", callback);
  }

  setSong(code: string, songId: string) {
    const __args = { code, songId };
    let __writer = new BinaryWriter(1024);
    SetSong.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_song", __argsBuffer, this.setCallReducerFlags.setSongFlags);
  }

  onSetSong(callback: (ctx: ReducerEventContext, code: string, songId: string) => void) {
    this.connection.onReducer("set_song", callback);
  }

  removeOnSetSong(callback: (ctx: ReducerEventContext, code: string, songId: string) => void) {
    this.connection.offReducer("set_song", callback);
  }

  startMatch(code: string) {
    const __args = { code };
    let __writer = new BinaryWriter(1024);
    StartMatch.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("start_match", __argsBuffer, this.setCallReducerFlags.startMatchFlags);
  }

  onStartMatch(callback: (ctx: ReducerEventContext, code: string) => void) {
    this.connection.onReducer("start_match", callback);
  }

  removeOnStartMatch(callback: (ctx: ReducerEventContext, code: string) => void) {
    this.connection.offReducer("start_match", callback);
  }

}

export class SetReducerFlags {
  createLobbyFlags: CallReducerFlags = 'FullUpdate';
  createLobby(flags: CallReducerFlags) {
    this.createLobbyFlags = flags;
  }

  joinLobbyFlags: CallReducerFlags = 'FullUpdate';
  joinLobby(flags: CallReducerFlags) {
    this.joinLobbyFlags = flags;
  }

  setCharacterFlags: CallReducerFlags = 'FullUpdate';
  setCharacter(flags: CallReducerFlags) {
    this.setCharacterFlags = flags;
  }

  setReadyFlags: CallReducerFlags = 'FullUpdate';
  setReady(flags: CallReducerFlags) {
    this.setReadyFlags = flags;
  }

  setScoreFlags: CallReducerFlags = 'FullUpdate';
  setScore(flags: CallReducerFlags) {
    this.setScoreFlags = flags;
  }

  setSongFlags: CallReducerFlags = 'FullUpdate';
  setSong(flags: CallReducerFlags) {
    this.setSongFlags = flags;
  }

  startMatchFlags: CallReducerFlags = 'FullUpdate';
  startMatch(flags: CallReducerFlags) {
    this.startMatchFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get lobby(): LobbyTableHandle {
    return new LobbyTableHandle(this.connection.clientCache.getOrCreateTable<Lobby>(REMOTE_MODULE.tables.lobby));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
